plugins {
    id 'java'
    id 'idea'
    id 'signing'
    id 'java-library'
    id 'maven-publish'
    id 'org.ajoberstar.grgit' version '4.1.1'
    id 'com.github.sherter.google-java-format' version '0.8'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

//configurations.all.resolutionStrategy {
//    // 版本冲突时直接构建失败
//    // failOnVersionConflict()
//
//    // 缓存有效时间
//    // cacheChangingModulesFor 0,'seconds'
//}

googleJavaFormat {
    options style: 'AOSP'
    source = sourceSets*.allJava
    include '**/*.java'
    exclude '**/temp/*.java'
}

verifyGoogleJavaFormat {
    source = sourceSets*.allJava
    include '**/*.java'
    exclude '**/temp/*.java'
}

group = 'org.fisco-bcos'

subprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'jacoco'
    apply plugin: 'signing'

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }

    sourceSets{
        main {
            java {
                srcDir "src/main/java"
            }
            resources {
                srcDir 'src/main/resources'
            }
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()

        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    }

    dependencies {
        compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.32'
        compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.13.2.2'
        compile group: 'com.google.code.gson', name:'gson', version:'2.9.0'

        testImplementation group: 'junit', name: 'junit', version: '4.12'
        testImplementation group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.32'
        testImplementation group: 'commons-codec', name: 'commons-codec', version: '1.14'
    }

    jar {
        // destinationDir file('dist/apps')
        // archiveName project.name + '-' + project.version + '.jar'
        exclude '**/*.xml'
        exclude '**/*.properties'

        manifest {
            try {
                def repo = grgit.open(currentDir: project.rootDir)
                if (repo != null) {
                    def date = new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
                    def branch = repo.branch.getCurrent().getName()
                    def commit = repo.head().getAbbreviatedId(40)

                    attributes(["Implementation-Timestamp": date,
                                "Git-Branch"              : branch,
                                "Git-Commit"              : commit
                    ])

                    logger.info("  Commit : ")
                    logger.info("  => date: {}", date)
                    logger.info("  => branch: {}", branch)
                    logger.info("  => commit: {}", commit)
                }
            } catch (Exception e) {
                logger.info(' Not a git project ')
            }
        } from sourceSets.main.output

        doLast {
            copy {
                from destinationDir
                into 'dist/apps'
            }

            copy {
                from configurations.runtime
                into 'dist/lib'
            }

            copy {
                from file('src/main/resources/log4j.properties')
                into 'dist/conf'
            }
        }
    }
}

// Additional attribute definition
ext {
    if (!project.hasProperty("ossrhUsername")) {
        ossrhUsername="xxx"
    }

    if (!project.hasProperty("ossrhPassword")) {
        ossrhPassword="xxx"
    }
}

// Test related configuration
test {
    testLogging {
        // showStandardStreams = true
        events "started","passed","skipped","failed"
    }
}

//javadoc {
//    options.addStringOption('Xdoclint:none', '-quiet')
//    options.addStringOption('encoding', 'UTF-8')
//    options.addStringOption('charSet', 'UTF-8')
//}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}
